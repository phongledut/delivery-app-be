// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String    @default("")
  fullName    String    @default("") @map("full_name")
  birthday    String    @default("") @map("birth_day")
  citizenId   String    @default("") @map("citizen_id")
  citizenDate String    @default("") @map("citizen_date")
  citizenAdd  String    @default("") @map("citizen_add")
  role        String    @default("user")
  phoneNumber String    @default("") @map("phone_number")
  address     String    @default("")
  gender      String    @default("male")
  avatar      String    @default("")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @default(now()) @map("deleted_at")
  Orders      Orders[]

  @@map("users")
}

model Moderator {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String    @default("")
  fullName    String    @default("") @map("full_name")
  birthday    String    @default("") @map("birth_day")
  citizenId   String    @default("") @map("citizen_id")
  citizenDate String    @default("") @map("citizen_date")
  citizenAdd  String    @default("") @map("citizen_add")
  phoneNumber String    @default("") @map("phone_number")
  address     String    @default("")
  gender      String    @default("male")
  avatar      String    @default("")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @default(now()) @map("deleted_at")

  @@map("moderator")
}

model Tags {
  id        String     @id @default(uuid())
  name      String     @default("")
  orders    Orders[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @default(now()) @map("deleted_at")
  TagOrder  TagOrder[]

  @@map("tag")
}

model Province {
  id               Int        @id @default(autoincrement())
  code             String     @default("")
  name             String     @default("")
  nameEn           String     @default("") @map("name_en")
  fullName         String     @default("") @map("full_name")
  fullNameEn       String     @default("") @map("full_name_en")
  codeName         String     @default("") @map("code_name")
  unitId           Int        @map("unit_id")
  countryId        Int        @map("country_id")
  District         District[]
  ordersAsSender   Orders[]   @relation(name: "SenderProvinceRelation")
  ordersAsReceiver Orders[]   @relation(name: "ReceiverProvinceRelation")

  @@map("province")
}

model District {
  id               Int      @id @default(autoincrement())
  code             String   @default("")
  name             String   @default("")
  nameEn           String   @default("") @map("name_en")
  fullName         String   @default("") @map("full_name")
  fullNameEn       String   @default("") @map("full_name_en")
  codeName         String   @default("") @map("code_name")
  provinceId       Int
  province         Province @relation(fields: [provinceId], references: [id])
  ward             Ward[]
  ordersAsSender   Orders[] @relation(name: "SenderDistrictRelation")
  ordersAsReceiver Orders[] @relation(name: "ReceiverDistrictRelation")

  @@map("district")
}

model Ward {
  id               Int      @id @default(autoincrement())
  code             String   @default("")
  name             String   @default("")
  nameEn           String   @default("") @map("name_en")
  fullName         String   @default("") @map("full_name")
  fullNameEn       String   @default("") @map("full_name_en")
  codeName         String   @default("") @map("code_name")
  districtId       Int      @map("district_id")
  district         District @relation(fields: [districtId], references: [id])
  ordersAsSender   Orders[] @relation(name: "SenderWardRelation")
  ordersAsReceiver Orders[] @relation(name: "ReceiverWardRelation")

  @@map("ward")
}

model Orders {
  id                 String     @id @default(uuid())
  name               String     @default("")
  productVolume      Float      @default(0) @map("product_volume")
  volumeUnit         String     @default("g") @map("volume_unit")
  description        String     @default("")
  senderName         String     @default("") @map("sender_name")
  senderPhone        String     @default("") @map("sender_phone")
  senderStreet       String     @default("") @map("sender_street")
  senderProvince     Province   @relation(name: "SenderProvinceRelation", fields: [provinceSenderId], references: [id])
  senderDistrict     District   @relation(name: "SenderDistrictRelation", fields: [districtSenderId], references: [id])
  senderWard         Ward       @relation(name: "SenderWardRelation", fields: [wardSenderId], references: [id])
  receiverName       String     @default("") @map("receiver_name")
  receiverPhone      String     @default("") @map("receiver_phone")
  receiverStreet     String     @default("") @map("receiver_street")
  receiverProvince   Province   @relation(name: "ReceiverProvinceRelation", fields: [provinceReceiverId], references: [id])
  receiverDistrict   District   @relation(name: "ReceiverDistrictRelation", fields: [districtReceiverId], references: [id])
  receiverWard       Ward       @relation(name: "ReceiverWardRelation", fields: [wardReceiverId], references: [id])
  status             STATUS     @default(WAITING)
  userCreated        String     @map("user_created")
  shipper            String     @default("") @map("shipper")
  tags               Tags[]
  user               User       @relation(fields: [userCreated], references: [id])
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  deletedAt          DateTime?  @default(now()) @map("deleted_at")
  TagOrder           TagOrder[]
  provinceSenderId   Int        @map("province_sender_id")
  provinceReceiverId Int        @map("province_receiver_id")
  districtSenderId   Int        @map("district_sender_id")
  districtReceiverId Int        @map("district_receiver_id")
  wardSenderId       Int        @map("ward_sender_id")
  wardReceiverId     Int        @map("ward_receiver_id")

  @@map("orders")
}

model TagOrder {
  orders  Orders  @relation(fields: [orderId], references: [id])
  orderId String  @map("order_id")
  tags    Tags?   @relation(fields: [tagId], references: [id])
  tagId   String? @map("tag_id")

  @@id([orderId])
  @@unique([orderId, tagId])
  @@map("tag_order")
}

model ProductPrices {
  id        String  @id @default(uuid())
  name      String  @default("")
  price     Float   @default(0)
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "prices_product_id_fkey")
  @@map("product_prices")
}

model Categories {
  id         String    @id @default(uuid())
  name       String    @default("")
  slug       String    @default("")
  childrenId String
  products   Product[]

  @@map("categories")
}

model Product {
  id          String          @id @default(uuid())
  name        String          @default("")
  subTitle    String          @default("") @map("sub_title")
  imageUrl    String          @default("") @map("image_url")
  description String          @default("")
  prices      ProductPrices[]
  categoryId  String          @map("category_id")
  category    Categories      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  rate        Int
  status      String
  size        String
  slug        String
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  deletedAt   DateTime?       @default(now()) @map("deleted_at")

  @@map("products")
}

model Otp {
  email      String   @unique
  otp        String
  isVerified Boolean  @default(false) @map("is_verified")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([email, otp])
  @@map("otp")
}

enum STATUS {
  WAITING
  SHIPPING
  DONE
  CANCEL
}
